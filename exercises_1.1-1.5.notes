----------Exercise 1.1---------- 

"Below is a sequence of expressions. What is the result printed by the interpreter in the response to each expression? Assume that the sequence is to be evaluated in the order in which it is presented."

10
//10

(+ 5 3 4 )
//12

(- 9 1)
//8

(/ 6 2 )
//3

( define a 3)
//a 

( define b (+ a 1))
//4

(+ a b (* a b))
//19

(= a b)
//false

(if (and (> b a ) ( < b ( * a b)))
	b 
	a )
//4

(cond ((= a 4) 6)
	(( = b 4) ( + 6 7 a ))
	b 
	a )
//16

(+ 2 ( if > b a ) b a))
//6

(* (cond ((> a b ) a)
		((< a b) b )
		(else -1)
	(+ a 1 )))

//16

----------Exercise 1.2---------- 

(/ (+ 5 
	  4 
	  (- 2 (- 3(+ 6 (/ 4 5)))))
(* 3
	(- 6 2) (- 2 7))) 


----------Exercise 1.3---------- 


"Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers";

#Example 1

	(define 
		(largest_two_square_sum x y z)
		(if ( = x (larger x y))
			(sum-of-square x (larger y z ))
			(sum-of-square y (larger x z))
			)
	)

	(define 
			(larger x y)
				(if ( > x y ) x y )
	)

	(define 
			(sum-of-squares x y)
				(+ (square x) (square y))
	)

	(define 
			(square x)
			( * x x)
	)


#Example 2

	//define square
	(define
		(square x) (* x x)
	)

	//define sume of squares
	(define
		(sum-of-squares x y) (+ (square x) (square y))
	)

	//define largest sum of squares
	(define
		(sum-of-squares-largest-two x y z)
		(cond (= ((min x y z) x) (sum-of-squares y z))
			  (= ((min x y z) y) (sum-of-squares x z))
			  (= ((min x y z) z) (sum-of-squares x y))
	)


#Example 3

(define (square x) (* x x))

(define (sum-of-squares x y) 
	(+ (square x)(square y))
)

(define (sum-of-largest-two)
	(if (>= x y) 
	(sum-of-squares))
)

----------Exercise 1.4---------- 

"Observe that our model of evaluation allows for cominations whose operators are compound expressions. Use this observation to describe the behavior of the following procedure"

(define (a-plus-abs-b a b)
	((if (> b 0) + -) a b))
	
	if b is greater than zero add a and b;
	if b is less than zero subract a and b;


----------Exercise 1.5---------- 
"Ben Bitdiddle has invented a test to determine whether the interpreter he is faced with is using applicative-order evaluation or normal-order evaluation. He defines the following two procedures:"

(define (p) (p))
(define (test x y)
	if ( = x 0)
		0
		y ))

"Then he evaluates the expression:"

(test 0 (p))

"What behavior will Ben observe with an interpreter that uses applicative-order evaluation?" 
"What behavior will he observe with a interpreter that uses normal-order evaluation?" 
"(Assume that the evaluation rule for the special form ```if``` is the same whether the interpreter is using normal or applicative-order; the predicate expresssion is evaluated first, and the result determine whether to evaluate the consequent or the alternative expression)""


*Normal order* evalutates arguments when they are used in the body of the procedure
*Applicative order* evaluates arguments before they are used in the body of the procedure

Therefore: 

Normal order evaluation (test 0 (p))//0
Applicative order evalation (test 0 (p)) //infinite loop

----------Exercise 1.6---------- 

Typical if statements are special forms, ie they only evaluate the else-clause expression if the predicate expression is false. 
If it's true, the evaluation ends and a value is printed. But the new-if statement is not a special form: ALL expressions are evaluated. 
Evaluating the else-clause of new-if in the body of sqrt-iter re-triggers the evaluation sqrt-iter again. This means interpreter will never return a value for applications of sqrt-iter.
























